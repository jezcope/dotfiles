#+PROPERTY: header-args:haskell :tangle xmonad.hs :noweb yes

* Checking the syntax is correct

Just run:

#+BEGIN_SRC sh :results silent
  xmonad --recompile
#+END_SRC

* Imports

#+BEGIN_SRC haskell
  import XMonad
  import Control.Monad
  import Data.Monoid
  import System.Exit
 
  import qualified XMonad.StackSet as W
  import qualified Data.Map        as M

  import XMonad.Config.Mate
  import XMonad.Hooks.ManageDocks
  import XMonad.Hooks.ManageHelpers
  import XMonad.Hooks.SetWMName
  import XMonad.Hooks.DynamicLog
  import XMonad.Hooks.EwmhDesktops
  import XMonad.Layout.Tabbed
  import XMonad.Layout.ThreeColumns
  import XMonad.Layout.LayoutHints
  import XMonad.Actions.CycleWS
#+END_SRC

* Useful variables (used later)

#+BEGIN_SRC haskell
  -- The preferred terminal program, which is used in a binding below and by
  -- certain contrib modules.
  --
  myTerminal      = "sakura"
 
  -- Whether focus follows the mouse pointer.
  myFocusFollowsMouse :: Bool
  myFocusFollowsMouse = True
 
  -- Width of the window border in pixels.
  --
  myBorderWidth   = 1
 
  -- modMask lets you specify which modkey you want to use. The default
  -- is mod1Mask ("left alt").  You may also consider using mod3Mask
  -- ("right alt"), which does not conflict with emacs keybindings. The
  -- "windows key" is usually mod4Mask.
  --
  myModMask       = mod4Mask
 
  -- NOTE: from 0.9.1 on numlock mask is set automatically. The numlockMask
  -- setting should be removed from configs.
  --
  -- You can safely remove this even on earlier xmonad versions unless you
  -- need to set it to something other than the default mod2Mask, (e.g. OSX).
  --
  -- The mask for the numlock key. Numlock status is "masked" from the
  -- current modifier status, so the keybindings will work with numlock on or
  -- off. You may need to change this on some systems.
  --
  -- You can find the numlock modifier by running "xmodmap" and looking for a
  -- modifier with Num_Lock bound to it:
  --
  -- > $ xmodmap | grep Num
  -- > mod2        Num_Lock (0x4d)
  --
  -- Set numlockMask = 0 if you don't have a numlock key, or want to treat
  -- numlock status separately.
  --
  -- myNumlockMask   = mod2Mask -- deprecated in xmonad-0.9.1
  ------------------------------------------------------------
 
 
  -- The default number of workspaces (virtual screens) and their names.
  -- By default we use numeric strings, but any string may be used as a
  -- workspace name. The number of workspaces is determined by the length
  -- of this list.
  --
  -- A tagging example:
  --
  -- > workspaces = ["web", "irc", "code" ] ++ map show [4..9]
  --
  myWorkspaces    = map show [1..8]
 
  -- Border colors for unfocused and focused windows, respectively.
  --
  myNormalBorderColor  = "#333333"
  myFocusedBorderColor = "#3366ff"
#+END_SRC

* Key bindings

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Key bindings. Add, modify or remove key bindings here.
  --
  myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
 
      -- launch a terminal
      [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
 
      -- launch dmenu
      , ((modm,               xK_p     ), spawn "exe=`dmenu_path | dmenu` && eval \"exec $exe\"")
 
      -- launch gmrun
      , ((modm              , xK_r     ), mateRun)
 
      -- close focused window
      , ((modm .|. shiftMask, xK_c     ), kill)
 
       -- Rotate through the available layout algorithms
      , ((modm,               xK_space ), sendMessage NextLayout)
 
      --  Reset the layouts on the current workspace to default
      , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
 
      -- Resize viewed windows to the correct size
      , ((modm,               xK_n     ), refresh)
 
      -- Move focus to the next window
      , ((modm,               xK_Tab   ), windows W.focusDown)
 
      -- Move focus to the next window
      , ((modm,               xK_j     ), windows W.focusDown)
 
      -- Move focus to the previous window
      , ((modm,               xK_k     ), windows W.focusUp  )
 
      -- Move focus to the master window
      , ((modm,               xK_m     ), windows W.focusMaster  )
 
      -- Swap the focused window and the master window
      , ((modm,               xK_Return), windows W.swapMaster)
 
      -- Swap the focused window with the next window
      , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
 
      -- Swap the focused window with the previous window
      , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )
 
      -- Shrink the master area
      , ((modm .|. shiftMask, xK_h     ), sendMessage Shrink)
 
      -- Expand the master area
      , ((modm .|. shiftMask, xK_l     ), sendMessage Expand)
 
      -- Push window back into tiling
      , ((modm,               xK_t     ), withFocused $ windows . W.sink)
 
      -- Increment the number of windows in the master area
      , ((modm              , xK_comma ), sendMessage (IncMasterN 1))
 
      -- Deincrement the number of windows in the master area
      , ((modm              , xK_period), sendMessage (IncMasterN (-1)))
 
      -- Toggle the status bar gap
      -- Use this binding with avoidStruts from Hooks.ManageDocks.
      -- See also the statusBar function from Hooks.DynamicLog.

      , ((modm              , xK_b     ), sendMessage ToggleStruts)
 
      -- Quit xmonad
      , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
 
      -- Restart xmonad
      , ((modm              , xK_q     ), spawn "xmonad --recompile; xmonad --restart")

      -- Toggle showing docks
      , ((modm              , xK_b     ), sendMessage ToggleStruts)

      -- Lock the screen
      -- , ((modm .|. shiftMask, xK_z     ), spawn "xscreensaver-command -lock")

      -- Next/previous WS
      , ((modm              , xK_Right ), nextWS)
      , ((modm              , xK_Left  ), prevWS)
      , ((modm              , xK_o     ), nextScreen)
      , ((modm .|. shiftMask, xK_o     ), shiftNextScreen)
      ]
      ++
 
      --
      -- mod-[1..9], Switch to workspace N
      --
      -- mod-[1..9], Switch to workspace N
      -- mod-shift-[1..9], Move client to workspace N
      --
      [((m .|. modm, k), windows $ f i)
          | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_8]
          , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
      ++
 
      --
      -- Arrange screens {*9*,0} where *9* is the primary display
      -- mod-{9,0}, Switch to physical/Xinerama screens
      -- mod-shift-{9,0}, Move client to screen
      --
      [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
          | (key, sc) <- zip [xK_9, xK_0] [0..]
          , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
#+END_SRC

* Mouse bindings

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Mouse bindings: default actions bound to mouse events
  --
  myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
 
      -- mod-button1, Set the window to floating mode and move by dragging
      [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                         >> windows W.shiftMaster))
 
      -- mod-button2, Raise the window to the top of the stack
      , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
 
      -- mod-button3, Set the window to floating mode and resize by dragging
      , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                         >> windows W.shiftMaster))
 
      -- you may also bind events to the mouse scroll wheel (button4 and button5)
      , ((modm, button4), (\w -> nextWS))
      , ((modm, button5), (\w -> prevWS))
      ]
#+END_SRC

* Layouts

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Layouts:
 
  -- You can specify and transform your layouts by modifying these values.
  -- If you change layout bindings be sure to use 'mod-shift-space' after
  -- restarting (with 'mod-q') to reset your layout state to the new
  -- defaults, as xmonad preserves your old layout settings by default.
  --
  -- * NOTE: XMonad.Hooks.EwmhDesktops users must remove the obsolete
  -- ewmhDesktopsLayout modifier from layoutHook. It no longer exists.
  -- Instead use the 'ewmh' function from that module to modify your
  -- defaultConfig as a whole. (See also logHook, handleEventHook, and
  -- startupHook ewmh notes.)
  --
  -- The available layouts.  Note that each layout is separated by |||,
  -- which denotes layout choice.
  --
  myLayout = layoutHints $ avoidStruts (tiled ||| hTiled ||| threeCol ||| threeColMid ||| simpleTabbed ||| Full)
    where
      -- default tiling algorithm partitions the screen into two panes
      tiled   = Tall nmaster delta ratio
      threeCol = ThreeCol nmaster delta ratio
      threeColMid = ThreeColMid nmaster delta ratio
      hTiled = Mirror tiled
 
      -- The default number of windows in the master pane
      nmaster = 1
 
      -- Default proportion of screen occupied by master pane
      ratio   = 3/5
 
      -- Percent of screen to increment by when resizing panes
      delta   = 3/100
#+END_SRC

* Window rules

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Window rules:
 
  -- Execute arbitrary actions and WindowSet manipulations when managing
  -- a new window. You can use this to, for example, always float a
  -- particular program, or have a client always appear on a particular
  -- workspace.
  --
  -- To find the property name associated with a program, use
  -- > xprop | grep WM_CLASS
  -- and click on the client you're interested in.
  --
  -- To match on the WM_NAME, you can use 'title' in the same way that
  -- 'className' and 'resource' are used below.
  --
  -- myManageHook = isDialog --> doF W.shiftMaster <+> doF W.swapDown
  -- myManageHook = fmap not isDialog --> doF avoidMaster
  myManageHook = composeAll
      [ className =? "MPlayer"        --> doFloat
      , className =? "Gimp"           --> doFloat
      , className =? "Sonata"         --> doFloat
      , className =? "Skype"          --> doFloat
      , resource  =? "desktop_window" --> doIgnore
      , resource  =? "kdesktop"       --> doIgnore
      , resource  =? "Do"             --> doIgnore
      , className =? "Pidgin"         --> doFloat
      , fmap not isDialog             --> doF avoidMaster]

  avoidMaster :: W.StackSet i l a s sd -> W.StackSet i l a s sd
  avoidMaster = W.modify' $ \c -> case c of
       W.Stack t [] (r:rs) ->  W.Stack t [r] rs
       otherwise           -> c
#+END_SRC

* Event handling

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Event handling
 
  -- Defines a custom handler function for X Events. The function should
  -- return (All True) if the default handler is to be run afterwards. To
  -- combine event hooks use mappend or mconcat from Data.Monoid.
  --
  -- * NOTE: EwmhDesktops users should use the 'ewmh' function from
  -- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
  -- It will add EWMH event handling to your custom event hooks by
  -- combining them with ewmhDesktopsEventHook.
  --
  myEventHook = mempty

  -- Hacky focus fix from http://mth.io/posts/xmonad-java-focus/
  local_atom_WM_TAKE_FOCUS ::
    X Atom
  local_atom_WM_TAKE_FOCUS =
    getAtom "WM_TAKE_FOCUS"

  takeFocusX ::
    Window
    -> X ()
  takeFocusX w =
    withWindowSet . const $ do
      dpy <- asks display
      wmtakef <- local_atom_WM_TAKE_FOCUS
      wmprot <- atom_WM_PROTOCOLS
      protocols <- io $ getWMProtocols dpy w
      when (wmtakef `elem` protocols) $
        io . allocaXEvent $ \ev -> do
            setEventType ev clientMessage
            setClientMessageEvent ev w wmprot 32 wmtakef currentTime
            sendEvent dpy w False noEventMask ev

  takeTopFocus ::
    X ()
  takeTopFocus =
    withWindowSet $ maybe (setFocusX =<< asks theRoot) takeFocusX . W.peek
 
  ------------------------------------------------------------------------
  -- Status bars and logging
 
  -- Perform an arbitrary action on each internal state change or X event.
  -- See the 'XMonad.Hooks.DynamicLog' extension for examples.
  --
  --
  -- * NOTE: EwmhDesktops users should use the 'ewmh' function from
  -- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
  -- It will add EWMH logHook actions to your custom log hook by
  -- combining it with ewmhDesktopsLogHook.
  --
  myLogHook = takeTopFocus >> setWMName "LG3D"
 
  ------------------------------------------------------------------------
  -- Startup hook
 
  -- Perform an arbitrary action each time xmonad starts or is restarted
  -- with mod-q.  Used by, e.g., XMonad.Layout.PerWorkspace to initialize
  -- per-workspace layout choices.
  --
  -- By default, do nothing.
  --
  -- * NOTE: EwmhDesktops users should use the 'ewmh' function from
  -- XMonad.Hooks.EwmhDesktops to modify their defaultConfig as a whole.
  -- It will add initialization of EWMH support to your custom startup
  -- hook by combining it with ewmhDesktopsStartup.
  --
  myStartupHook = return ()
#+END_SRC

* Finalise the configuration

#+BEGIN_SRC haskell
  ------------------------------------------------------------------------
  -- Now run xmonad with all the defaults we set up.
 
  -- Run xmonad with the settings you specify. No need to modify this.
  --
  main = xmonad =<< (xmobar $ ewmh $ defaults)
 
  -- A structure containing your configuration settings, overriding
  -- fields in the default config. Any you don't override, will
  -- use the defaults defined in xmonad/XMonad/Config.hs
  --
  -- No need to modify this.
  --
  defaults = mateConfig {
        -- simple stuff
          terminal           = myTerminal,
          focusFollowsMouse  = myFocusFollowsMouse,
          borderWidth        = myBorderWidth,
          modMask            = myModMask,
          -- numlockMask deprecated in 0.9.1
          -- numlockMask        = myNumlockMask,
          workspaces         = myWorkspaces,
          normalBorderColor  = myNormalBorderColor,
          focusedBorderColor = myFocusedBorderColor,
 
        -- key bindings
          keys               = myKeys,
          mouseBindings      = myMouseBindings,
 
        -- hooks, layouts
          layoutHook         = myLayout,
          manageHook         = myManageHook <+> manageDocks,
          handleEventHook    = myEventHook,
          logHook            = myLogHook,
          startupHook        = myStartupHook
      }

#+END_SRC
