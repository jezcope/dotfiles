* Evil mode configuration


Set =lexical-binding=:

#+BEGIN_SRC emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+END_SRC

** Basic setup

#+BEGIN_SRC emacs-lisp
  (setq-default evil-shift-width 2
                evil-shift-round t)

  (setq evil-cross-lines t)
#+END_SRC

*** Save on leaving insert state

#+BEGIN_SRC emacs-lisp
  (defun jc/save-current ()
    (interactive)
    (if (jc/buffer-visiting-real-file-p)
      (save-buffer)))

  (add-hook 'evil-insert-state-exit-hook #'jc/save-current)
#+END_SRC

*** Modes that should be in emacs state

#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-modes
        (-distinct
         (append evil-emacs-state-modes
                 '(term-mode
                   twittering-mode
                   twittering-edit-mode
                   erc-mode
                   neotree-mode))))
#+END_SRC
** Leader

#+BEGIN_SRC emacs-lisp
  (setq evil-leader/leader "<SPC>")

  (evil-leader/set-key
    "b" 'ivy-switch-buffer
    "B" 'jc/blogging-hydra/body
    "c" 'org-capture
    "a" 'org-agenda
    "l" 'jc/launcher-hydra/body
    "j" 'jump-to-register
    "f" 'jc/file-hydra/body
    "F" 'jc/find-files-hydra/body
    "t" 'jc/toggle-hydra/body
    "i" 'counsel-imenu
    "n" 'neotree-show
    "p" 'jc/projectile-hydra/body)

  (evil-leader/set-key-for-mode 'org-mode
    "r" 'jc/org-refile-hydra/body)

  (global-evil-leader-mode 1)
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :config
    (setq avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
    (defhydra jc/avy-hydra ()
      ("w" evil-avy-goto-word-1 "goto word"))

    (define-key evil-motion-state-map (kbd "zw") 'evil-avy-goto-word-1)
    (evil-leader/set-key "w" 'jc/avy-hydra/body))
#+END_SRC

** Nerd commenter

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "/i" 'evilnc-comment-or-uncomment-lines
    "/l" 'evilnc-quick-comment-or-uncomment-to-the-line
    "/y" 'evilnc-copy-and-comment-lines
    "/p" 'evilnc-comment-or-uncomment-paragraphs
    "/r" 'comment-or-uncomment-region
    "/v" 'evilnc-toggle-invert-comment-line-by-line)
#+END_SRC

** Evil Surround

#+BEGIN_SRC emacs-lisp
  (global-evil-surround-mode)
#+END_SRC

** Evil snipe

#+BEGIN_SRC emacs-lisp
  (use-package evil-snipe :demand
    :config
    (setq evil-snipe-scope 'visible)
    (evil-snipe-mode 1))
#+END_SRC

** Evil goggles

#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :config (evil-goggles-mode))
#+END_SRC

** Evil numbers

#+BEGIN_SRC emacs-lisp
  (use-package evil-numbers
    :commands (evil-numbers/inc-at-pt evil-numbers/dec-at-pt)
    :bind (:map evil-normal-state-map
                ("C-c +" . evil-numbers/inc-at-pt)
                ("C-c -" . evil-numbers/dec-at-pt)))
#+END_SRC

** Mode-specific stuff

*** Mu4e

#+BEGIN_SRC emacs-lisp
  (evil-define-key 'normal message-mode-map "^" 'message-beginning-of-line)
#+END_SRC

*** Org

**** Switch to insert state after certain commands

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (dolist (hook '(org-capture-mode-hook
                    org-insert-heading-hook
                    ))
      (add-hook hook 'evil-insert-state)))
#+END_SRC

*** Magit

**** Switch to insert state after certain commands

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'git-commit
    (add-hook 'git-commit-mode-hook 'evil-insert-state))
#+END_SRC
