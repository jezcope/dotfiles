#+STARTUP: content

* Main init file

** Pre-setup

*** Load customisations

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el"
        jc/old-custom-file (concat "~/.emacs.d/custom." (system-name) ".el"))

  ;; Migrate seamlessly from old system
  (if (and (not (file-exists-p custom-file))
           (file-exists-p jc/old-custom-file))
      (rename-file jc/old-custom-file custom-file))

  (load custom-file t)
#+END_SRC

*** Disable menu bar and toolbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Enable menu bar on Mac, as it doesn't make any difference:
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode
   (if (eq system-type 'darwin) 1 -1))
#+END_SRC

*** Set some useful variables

#+BEGIN_SRC emacs-lisp
  (setq jc/dropbox-location
        (expand-file-name "~/Dropbox/")
  
        viper-mode nil)
#+END_SRC
*** Set exec-path to find some key programs

#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "/usr/local/bin")
  
  (if (eq system-type 'darwin)
      (add-to-list 'exec-path "/usr/local/texlive/2013/bin/universal-darwin" t))
  
  (setenv "PATH" (mapconcat 'identity exec-path ":"))
#+END_SRC

*** Set load-path

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
#+END_SRC

*** File locations

#+BEGIN_SRC emacs-lisp
  (setq org-directory (expand-file-name "Notes/Todo" jc/dropbox-location)
        org-default-notes-file (expand-file-name "Notes/Inbox/_Inbox.txt" jc/dropbox-location)

        jc/agenda-file-work (expand-file-name "work.org" org-directory)
        jc/agenda-file-personal (expand-file-name "personal.org" org-directory)
        jc/agenda-file-calendar (expand-file-name "~/calendar.org")

        jc/logbook-file (expand-file-name "logbook.org" org-directory)
        jc/logbook-file-work (expand-file-name "logbook-work.org" org-directory)

        custom-theme-directory (expand-file-name "~/.emacs.d/themes"))
#+END_SRC

** Require some key utilities

#+BEGIN_SRC emacs-lisp
  (require 'dash)
  (require 'cl)
#+END_SRC

** Additional setup files

#+BEGIN_SRC emacs-lisp
  (jc/require-org-file "init-org.org")
#+END_SRC

** Global setup

#+BEGIN_SRC emacs-lisp
  (setq tool-bar-mode nil
        menu-bar-mode nil
        scroll-bar-mode nil
        indent-tabs-mode nil
        standard-indent 2
        tab-stop-list (loop for n from 2 below 80 by 2 collect n)
        ispell-dictionary "british"
        )
  
  (setq-default tab-width 2
                indent-tabs-mode nil)
  
  ;; Allow narrow-to-region (which is disabled by default)
  (put 'narrow-to-region 'disabled nil)
  
  ;; Auto-revert all buffers by default
  (global-auto-revert-mode)
  
  ;; Show date/time in modeline
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  
  ;; Make sure authinfo is encrypted
  (setq auth-sources '("~/.authinfo.gpg")
        auth-source-gpg-encrypt-to '("j.cope@erambler.co.uk")
        )
#+END_SRC

*** Evil

#+BEGIN_SRC emacs-lisp
  (jc/require-org-file "init-evil.org")
  (evil-mode 1)
#+END_SRC

*** Initial buffer

#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "* Scratch\n\n# This buffer is for notes you don't want to save, and for Lisp evaluation.\n\n#+BEGIN_SRC emacs-lisp\n\n#+END_SRC\n"
        initial-major-mode 'org-mode
        initial-buffer-choice t)
#+END_SRC

*** Correctly set GPG/SSH agent info

Solution adapted from [[http://whatthefuck.computer/blog/2015/05/20/re-agent/][Ryan Rix's blog]]

#+BEGIN_SRC emacs-lisp
  (setq jc/gpg-env (expand-file-name "~/.gnupg/gpg-agent.env"))

  ;; Only run when gpg environment file available (i.e. GPG <= 2.0)
  (if (file-readable-p jc/gpg-env)
      (progn
        (defun jc/re-agent ()
          "Load your gpg-agent.env file in to the environment

  This is extra useful if you use gpg-agent with --enable-ssh-support"
          (with-temp-buffer
            (insert-file-contents jc/gpg-env)
            (goto-char (point-min))
            (setq case-replace nil)
            (replace-regexp "\\(.*\\)=\\(.*\\)" "(setenv \"\\1\" \"\\2\")")
            (eval-buffer))
          (getenv "GPG_AGENT_INFO"))

        (run-with-idle-timer 60 t 'jc/re-agent)
        (jc/re-agent)
        )

    ;; GPG 2.1+ uses a standard location
    (setenv "SSH_AUTH_SOCK" "~/.gnupg/S.gpg-agent.ssh")
    )
#+END_SRC

*** Fonts

Set default fonts in order of preference:

#+BEGIN_SRC emacs-lisp
  (defun jc/first-available-font (&rest stack)
    (loop for f in stack
          if (member f (font-family-list))
          do (return f)))

  (setq jc/font-fixed
        (jc/first-available-font
         "Input Mono Compressed"
         "Inconsolata"
         "Droid Sans Mono"
         "Ubuntu Mono"
         "Menlo"
         "Monaco"
         "fixed"
         )

        jc/font-variable
        (jc/first-available-font
         "Input Sans Condensed"
         "Droid Sans"
         "Ubuntu Sans"
         "sans"
         )
        )

  (set-face-attribute 'default nil
                      :family jc/font-fixed
                      :height 110
                      :weight 'light
                      )

  (set-face-attribute 'variable-pitch nil
                      :family jc/font-variable
                      :height 110
                      :weight 'light
                      )
#+END_SRC

Make some modes variable pitch by default:

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(
               org-mode-hook
               python-mode-hook
               markdown-mode-hook
               TeX-mode-hook
               message-mode-hook
               mu4e-view-mode-hook
               ))
    (add-hook hook 'variable-pitch-mode))
#+END_SRC

Make some faces fixed pitch (mostly to fix vertical alignment issues):

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'org-indent
    '(set-face-attribute 'org-indent nil :inherit '(fixed-pitch org-hide)))
  (add-hook 'after-init-hook
            (lambda ()
              (set-face-attribute 'org-table nil :inherit '(fixed-pitch))
              (set-face-attribute 'org-formula nil :inherit '(fixed-pitch))
              (set-face-attribute 'org-block nil :inherit '(fixed-pitch))))
#+END_SRC

*** Editing preferences

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

*** Configure how to make buffer titles unique

This adds (to the filename) enough of the path after a vertical bar to make the title unique.

#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)
#+END_SRC

*** Save backups and autosaves somewhere more sensible

#+BEGIN_SRC emacs-lisp
  (setq jc/autosave-directory
        (expand-file-name "../.autosave" user-emacs-directory))
  (setq backup-directory-alist
        `((".*" . ,jc/autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,jc/autosave-directory t)))
#+END_SRC

*** Enable automatic saving of buffers

#+BEGIN_SRC emacs-lisp
  (defun jc/buffer-visiting-real-file-p ()
    (not (or (null buffer-file-name)
             (string-match "\\*scratch\\*" buffer-file-name))))

  (defun jc/save-everything-no-prompt ()
    (interactive)
    (let ((buffer-list-update-hook nil))
      (cl-letf (((symbol-function 'message) #'ignore))
        (save-some-buffers t 'jc/buffer-visiting-real-file-p))))

  ;(add-hook 'buffer-list-update-hook 'jc/save-everything-no-prompt)

  ;; If we're in emacs â‰¥24.4 save everything on focus-out too
  (if (fboundp 'handle-focus-out)
      (add-hook 'focus-out-hook 'jc/save-everything-no-prompt))
#+END_SRC

*** Don't query about running processes on exit

#+BEGIN_SRC emacs-lisp
  (add-hook 'comint-exec-hook 
        (lambda () (set-process-query-on-exit-flag (get-buffer-process (current-buffer)) nil)))
#+END_SRC

*** Choose appearance

#+BEGIN_SRC emacs-lisp
  (load-theme 'darktooth t)
  (eval-after-load 'hydra
    '(progn
       (set-face-foreground 'hydra-face-red
                            (if (display-graphic-p) "#FB4933" "color-167"))
       (set-face-foreground 'hydra-face-blue
                            (if (display-graphic-p) "#83A598" "color-109"))
       (set-face-foreground 'hydra-face-pink
                            (if (display-graphic-p) "#D3869B" "color-175"))
       (set-face-foreground 'hydra-face-teal
                            (if (display-graphic-p) "#8EC07C" "color-108"))
       (set-face-foreground 'hydra-face-amaranth
                            (if (display-graphic-p) "#AF3A03" "color-130"))))

  (setq powerline-default-separator 'wave)
  (powerline-default-theme)

  (with-eval-after-load 'helm-mode
    (diminish 'helm-mode))
  (with-eval-after-load 'yasnippet
    (diminish 'yas-minor-mode))
  (diminish 'undo-tree-mode)
  (diminish 'filladapt-mode)
  (add-hook 'buffer-face-mode-hook
            (lambda () (diminish 'buffer-face-mode)))
  (add-hook 'org-indent-mode-hook
            (lambda () (diminish 'org-indent-mode)))
  (with-eval-after-load 'org-src
    (diminish 'org-src-mode "OS"))
  (diminish 'visual-line-mode)
#+END_SRC

*** Activate filladapt-mode

#+BEGIN_SRC emacs-lisp
  (require 'filladapt)
  (setq-default filladapt-mode t)
#+END_SRC

*** Activate yasnippet

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (setq yas-snippet-dirs
        (-insert-at 1 (expand-file-name "snippets-local" user-emacs-directory) yas-snippet-dirs))

  (yas-global-mode 1)
  (add-hook 'wl-draft-mode-hook 'yas-minor-mode-on)

  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
      "Use helm to select a snippet. Put this into `yas-prompt-functions.'"
      (interactive)
      (setq display-fn (or display-fn 'identity))
      (if (require 'helm-config)
          (let (tmpsource cands result rmap)
            (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
            (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
            (setq tmpsource
                  (list
                   (cons 'name prompt)
                   (cons 'candidates cands)
                   '(action . (("Expand" . (lambda (selection) selection))))
                   ))
            (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
            (if (null result)
                (signal 'quit "user quit!")
              (cdr (assoc result rmap))))
        nil))

  (setq yas-also-indent-first-line t
        yas-prompt-functions '(shk-yas/helm-prompt
                               yas-x-prompt
                               yas-ido-prompt
                               yas-completing-prompt
                               yas-no-prompt))
#+END_SRC

**** Disable in some modes

#+BEGIN_SRC emacs-lisp
  (add-hook 'term-mode-hook (lambda()
                              (yas-minor-mode -1)))
#+END_SRC

*** Configure MMM-mode

=mmm-mode= allows multiple major modes to be active in different regions of a single buffer.n

#+BEGIN_SRC emacs-lisp
  (require 'mmm-auto)
  
  (setq mmm-global-mode 'maybe)
#+END_SRC

**** Detect YAML front matter in some files

[[http://nanoc.ws/][Nanoc]] uses [[http://nanoc.ws/docs/basics/#attributes][YAML sections at the start of files]] to define metadata.

#+BEGIN_SRC emacs-lisp
  (mmm-add-classes
   '((yaml-front-matter
      :submode yaml-mode
      :front "\\`---\n"
      :back "^---$")))

  (mmm-add-mode-ext-class 'markdown-mode nil 'yaml-front-matter)
  (mmm-add-mode-ext-class 'gfm-mode nil 'yaml-front-matter)
#+END_SRC

**** Check for new major mode regions after yas expansion

=yasnippet= needs to ask mmm-mode to reparse after completing a snippet.

#+BEGIN_SRC emacs-lisp
  (add-hook 'yas-after-exit-snippet-hook
            '(lambda ()
               (if mmm-mode
                   (mmm-parse-region yas-snippet-beg yas-snippet-end))))
#+END_SRC

*** Customise whitespace-mode

#+BEGIN_SRC emacs-lisp
  (setq whitespace-style
        (quote (face tabs spaces trailing lines space-before-tab
                     newline empty space-after-tab space-mark tab-mark
                     newline-mark)))
#+END_SRC

*** Company mode

#+BEGIN_SRC emacs-lisp
  (global-company-mode 1)

  (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
#+END_SRC

*** Activate and configure Helm

Set global helm-mode and some specific key bindings.
#+BEGIN_SRC emacs-lisp
  (require 'helm-config)

  (helm-mode 1)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-s") 'helm-swoop)
#+END_SRC

Enable fuzzy matching in some useful places.
#+BEGIN_SRC emacs-lisp
  (setq helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t)
#+END_SRC

*** Use kill ring as X clipboard history                     :experimental:

This should ensure the X clipboard contents isn't lost during normal editing.

#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+END_SRC

This doesn't work as I want it to right now - needs reworking.

#+BEGIN_SRC emacs-lisp
  ;; (defun jc/clipboard-to-kill-ring ()
  ;;   (interactive)
  ;;   (let ((clipboard (x-get-clipboard)))
  ;;     (when (not (string= clipboard (car kill-ring)))
  ;;       (kill-new (x-get-clipboard)))))
  
  ;; (setq jc/clipboard-to-kill-ring-timer
  ;;       (run-with-timer 0.5 0.5 'jc/clipboard-to-kill-ring))
#+END_SRC

*** Configure expand-region and change-inner

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
  
  (global-set-key (kbd "M-i") 'change-inner)
  (global-set-key (kbd "M-o") 'change-outer)
#+END_SRC

*** Change M-z to leave the character alone

#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.
  
  \(fn arg char)"
    'interactive)
  (global-set-key (kbd "M-z") 'zap-up-to-char)
#+END_SRC

*** Projectile

#+BEGIN_SRC emacs-lisp
  (setq projectile-mode-line '(:eval
                               (format " P[%s]"
                                       (projectile-project-name)))
        projectile-completion-system 'helm)

  (projectile-global-mode)
  (helm-projectile-on)

  ;; Taken from http://oremacs.com/2015/07/20/hydra-columns/
  (defhydra jc/projectile-hydra (:color blue :columns 4)
    "Projectile"
    ("a" projectile-ag "ag")
    ("b" projectile-switch-to-buffer "switch to buffer")
    ("c" projectile-invalidate-cache "cache clear")
    ("d" projectile-find-dir "dir")
    ("s-f" projectile-find-file "file")
    ("ff" projectile-find-file-dwim "file dwim")
    ("fd" projectile-find-file-in-directory "file curr dir")
    ("g" ggtags-update-tags "update gtags")
    ("i" projectile-ibuffer "Ibuffer")
    ("K" projectile-kill-buffers "Kill all buffers")
    ("o" projectile-multi-occur "multi-occur")
    ("p" projectile-switch-project "switch")
    ("r" projectile-recentf "recent file")
    ("x" projectile-remove-known-project "remove known")
    ("X" projectile-cleanup-known-projects "cleanup non-existing")
    ("z" projectile-cache-current-file "cache current")
    ("q" nil "cancel"))
  (global-unset-key (kbd "C-c p"))
  (global-set-key (kbd "C-c p") 'jc/projectile-hydra/body)
#+END_SRC

*** Deft (for quick reference)

#+BEGIN_SRC emacs-lisp
  (setq deft-directory (expand-file-name "Notes/Reference" jc/dropbox-location))
#+END_SRC

*** Beacon

#+BEGIN_SRC emacs-lisp
  (beacon-mode 1)
#+END_SRC
** Key bindings
*** Guide key for reminders of key chord completions

#+BEGIN_SRC emacs-lisp
  (require 'guide-key)
  (setq guide-key/guide-key-sequence
        '("C-x" "SPC" "SPC ," "C-c p")

        guide-key/recursive-key-sequence-flag t
        guide-key/popup-window-position 'bottom
        guide-key/idle-delay 0.5)
  (guide-key-mode 1)

  (defun jc/org-mode-guide-key-setup ()
    (guide-key/add-local-guide-key-sequence "C-c")
    (guide-key/add-local-guide-key-sequence "C-c C-x")
    (guide-key/add-local-highlight-command-regexp "org-"))
  (add-hook 'org-mode-hook 'jc/org-mode-guide-key-setup)

  (defun jc/markdown-mode-guide-key-setup ()
    (guide-key/add-local-guide-key-sequence "C-c")
    (guide-key/add-local-guide-key-sequence "C-c C-x")
    (guide-key/add-local-guide-key-sequence "C-c C-a")
    (guide-key/add-local-highlight-command-regexp "markdown-")
    (guide-key/add-local-highlight-command-regexp "pandoc-"))
  (add-hook 'markdown-mode-hook 'jc/markdown-mode-guide-key-setup)
#+END_SRC

*** Set print screen key to paste from X clipboard

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<print>") 'clipboard-yank)
#+END_SRC

*** Enable windmove key bindings

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
#+END_SRC

*** Launcher map

Thanks to suggestions on [[http://endlessparentheses.com/launcher-keymap-for-standalone-features.html][Endless Parentheses]] for these.  This one launches some handy commands.

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "l"
    (defhydra jc/launcher-hydra (:exit t)
      "launch"
      ("d" deft "deft")
      ("e" ecb-activate "ecb")
      ("g" magit-status "magit status")
      ("t" jc/ansi-term-with-zsh "terminal")
      ("m" mu4e "mu4e")
      ("C" mu4e-compose-new "compose")
      ("i" (mu4e~headers-jump-to-maildir "/INBOX") "inbox")
      ("f" sunrise "sunrise")
      ))
#+END_SRC

This one toggles some minor modes.  Also inspired by [[http://endlessparentheses.com/the-toggle-map-and-wizardry.html][Endless Parentheses]].

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "t"
    (defhydra jc/toggle-hydra ()
      "toggle"
      ("c" column-number-mode "col num")
      ("l" line-number-mode "line num")
      ("f" auto-fill-mode "auto fill")
      ("v" variable-pitch-mode "var pitch")
      ("w" visual-line-mode "vis line")
      ("W" whitespace-mode "whitespace")))
#+END_SRC

These functions are required for some of the above.

#+BEGIN_SRC emacs-lisp
  (defun jc/find-inbox-file ()
    (interactive)
    (find-file org-default-notes-file))

  (defcustom jc/zsh-location "/usr/bin/zsh"
    "Location of zsh executable")
  (defun jc/ansi-term-with-zsh (arg)
    (interactive "P")
    (if arg
        (ansi-term jc/zsh-location "ansi-term[zsh]")
        (let ((shell-file-name jc/zsh-location))
        (shell "shell[zsh]"))))

  (autoload 'mu4e~headers-jump-to-maildir "mu4e.el")
#+END_SRC

*** Shortcuts to commonly used files

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c f")
    (defhydra jc/file-hydra (:exit t :columns 3 :hint none)
      "
  ^Projects^     ^Logbooks^     ^Org^
  ^^^^^^^^-----------------------------------------
  _p_: personal  _l_: personal  _'_: cycle agendas
  _w_: work      _L_: work      _,_; last refile
  _i_: inbox"
      ("i" (find-file org-default-notes-file))
      ("p" (find-file jc/agenda-file-personal))
      ("w" (find-file jc/agenda-file-work))
      ("l" (find-file jc/logbook-file))
      ("L" (find-file jc/logbook-file-work))
      ("'" org-cycle-agenda-files :exit nil)
      ("," org-refile-goto-last-stored)
      ("c" (find-file jc/agenda-file-calendar))
      ))
#+END_SRC

*** Special keys on keyboards that have them

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<XF86Search>") 'ido-switch-buffer)
  (global-set-key (kbd "<S-XF86Search>") 'ido-find-file)
  
  (global-set-key (kbd "<XF86Favorites>") 'execute-extended-command)
  (global-set-key (kbd "<menu>") 'execute-extended-command)
  (global-set-key (kbd "<S-XF86Favorites>") 'eval-expression)
  (global-set-key (kbd "<S-menu>") 'eval-expression)
#+END_SRC

*** Extra special character bindings

#+BEGIN_SRC emacs-lisp
  (define-key 'iso-transl-ctl-x-8-map "l" [?Â£])
#+END_SRC

*** ~avy~ and ~ace-*~

Overall setup:

#+BEGIN_SRC emacs-lisp
  (setq avy-keys '(?a ?o ?e ?u ?i ?d ?h ?t ?n))
#+END_SRC

~ace-link~:

#+BEGIN_SRC emacs-lisp
  (ace-link-setup-default)
  (define-key org-mode-map (kbd "M-o") 'ace-link-org)
#+END_SRC

~ace-window~:

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map (kbd "w") 'ace-window)
#+END_SRC

*** Other key bindings

#+BEGIN_SRC emacs-lisp
  (define-key ctl-x-map "k" 'kill-this-buffer)

  (defun jc/mark-whole-line ()
    (interactive)
    (beginning-of-line)
    (set-mark (point))
    (end-of-line))
  (define-key ctl-x-map (kbd "C-h") 'jc/mark-whole-line)

  (define-key global-map (kbd "C-h a") 'apropos)
#+END_SRC
** File-type specific

*** Text/documents

**** Markdown

#+BEGIN_SRC emacs-lisp
  (dolist (ext '("\\.markdown\\'" "\\.md\\'"))
    (add-to-list 'auto-mode-alist `(,ext . markdown-mode)))

  (dolist (func '(
                  flyspell-mode
                  visual-line-mode
                  adaptive-wrap-prefix-mode
                  orgstruct++-mode
                  (lambda ()
                    (setq orgstruct-heading-prefix-regexp "#\\+")
                    (pandoc-mode 1))
                  ))
    (add-hook 'markdown-mode-hook func)
    (add-hook 'gfm-mode-hook func))
#+END_SRC

**** HTML/XML/etc

#+BEGIN_SRC emacs-lisp
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'sgml-mode-hook 'rainbow-turn-on)
#+END_SRC

***** Configure emmet-mode

#+BEGIN_SRC emacs-lisp
  (setq emmet-indentation 4)
#+END_SRC

**** CSS

#+BEGIN_SRC emacs-lisp
  (add-hook 'css-mode-hook 'rainbow-turn-on)
#+END_SRC

**** TeX

#+BEGIN_SRC emacs-lisp
  (setq TeX-PDF-mode t
        TeX-engine 'luatex)
  (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
  (add-hook 'LaTeX-mode-hook 'reftex-mode)
  (setq reftex-plug-into-AUCTeX t)

  (put 'LaTeX-narrow-to-environment 'disabled nil)
#+END_SRC

**** Haml/Sass

#+BEGIN_SRC emacs-lisp
  (add-hook 'scss-mode-hook 'rainbow-turn-on)
  (setq scss-compile-at-save nil)
#+END_SRC

**** Web templating

#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
#+END_SRC
*** Programming languages
**** Lisp

#+BEGIN_SRC emacs-lisp
  (dolist (hook '(lisp-mode-hook emacs-lisp-mode-hook))
    (dolist (func '(show-paren-mode rainbow-delimiters-mode))
      (add-hook hook func)))
#+END_SRC

***** Useful functions for customising emacs

#+BEGIN_SRC emacs-lisp
  (defun jc/insert-variable-value (var)
    "Insert the value of a variable at point"
    (interactive "v")
    (insert (prin1-to-string (symbol-value var))))
#+END_SRC

This one obtained from [[http://stackoverflow.com/questions/1242352/get-font-face-under-cursor-in-emacs][Trey Jackson on StackOverflow]]:

#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    "Display the face currently under the cursor"
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face)
      (message "No face at %d" pos))))
#+END_SRC

**** Ruby

#+BEGIN_SRC emacs-lisp
  ;; (nconc auto-mode-alist
  ;;        '(("\\.thor\\'" . ruby-mode)
  ;;          ("\\.gemspec\\'" . ruby-mode)
  ;;          ("Thorfile\\'" . ruby-mode)
  ;;          ("Gemfile\\'" . ruby-mode)
  ;;          ("Guardfile\\'" . ruby-mode)
  ;;          ("Rules\\'" . ruby-mode)))
#+END_SRC

**** Shell scripts

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  (add-to-list 'auto-mode-alist '("PKGBUILD\\'" . sh-mode))
#+END_SRC

**** JavaScript

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

**** ESS (R/Splus/etc)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.R\\'" . R-mode))
#+END_SRC

*** Mail editing

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.eml\\'" . mail-mode))
  (add-hook 'mail-mode-hook 'visual-line-mode)
#+END_SRC


** Applications

*** Emacs Code Browser

#+BEGIN_SRC emacs-lisp
(setq ecb-tip-of-the-day nil
        ecb-primary-secondary-mouse-buttons (quote mouse-1--C-mouse-1)
        ecb-compilation-major-modes (quote (compilation-mode TeX-output-mode))
        )

  (add-hook 'ecb-activate-hook (lambda () (popwin-mode -1)))
  (add-hook 'ecb-deactivate-hook (lambda () (popwin-mode 1)))
#+END_SRC

**** Source files (include/exclude)

#+BEGIN_SRC emacs-lisp
  (setq ecb-source-file-regexps
        '(
          ;; In all folders:
          (".*"
           ;; Exclude
           ("\\(^\\(\\.\\|#\\)\\|\\(~$\\|\\.\\(elc\\|obj\\|o\\|class\\|lib\\|dll\\|a\\|so\\|cache\\|pyc\\)$\\)\\)")
           ;; Include
           ("^\\.\\(emacs\\|gnus\\)$"))
          ))
#+END_SRC

*** Dired/sunrise

#+BEGIN_SRC emacs-lisp
  (setq dired-omit-files "^\\."
        dired-listing-switches "-alh")
#+END_SRC

If the homebrew version of coreutils is installed under Mac, use that:

#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "/usr/local/bin/gls")
      (setq insert-directory-program "/usr/local/bin/gls"))
#+END_SRC

**** Open file in external viewer using C-RET

[[http://www.emacswiki.org/emacs/Sunrise_Commander][Found on EmacsWiki]] and subsequently modified to run asynchronously

#+BEGIN_SRC emacs-lisp
  (defun jc/sunrise-display-external ()
    "Open marked files or file at point in an external application."
    (interactive)
    (let ((files (or (dired-get-marked-files)
                     (list (dired-get-filename)))))
      (dolist (file files)
        (start-process "sunrise external viewer" "*sunrise external viewer*"
                       shell-file-name shell-command-switch
                       (format "%s \"%s\"" jc/sunrise-external-viewer file)))))
  
  (setq jc/sunrise-external-viewer
        (cond ((eq system-type 'darwin) "open")
              (t "xdg-open")))
  
  (eval-after-load 'sunrise-commander
    '(define-key sr-mode-map (kbd "<C-return>") 'jc/sunrise-display-external))
#+END_SRC

*** BBDB

#+BEGIN_SRC emacs-lisp
  (setq bbdb-file-remote (expand-file-name "Emacs/bbdb" jc/dropbox-location))
#+END_SRC

*** Mu4e

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :commands (mu4e)
    :config
    (when (file-exists-p (expand-file-name "init-mu4e.org" user-emacs-directory))
      (jc/require-org-file "init-mu4e.org"))

    (add-hook 'message-mode-hook 'flyspell-mode))
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
  (setq magit-push-always-verify nil)
#+END_SRC

*** Spelling

**** Jump to previous error

#+BEGIN_SRC emacs-lisp
  ;; move point to previous error
  ;; based on code by hatschipuh at
  ;; http://emacs.stackexchange.com/a/14912/2017
  (defun flyspell-goto-previous-error (arg)
    "Go to arg previous spelling error."
    (interactive "p")
    (while (not (= 0 arg))
      (let ((pos (point))
            (min (point-min)))
        (if (and (eq (current-buffer) flyspell-old-buffer-error)
                 (eq pos flyspell-old-pos-error))
            (progn
              (if (= flyspell-old-pos-error min)
                  ;; goto beginning of buffer
                  (progn
                    (message "Restarting from end of buffer")
                    (goto-char (point-max)))
                (backward-word 1))
              (setq pos (point))))
        ;; seek the next error
        (while (and (> pos min)
                    (let ((ovs (overlays-at pos))
                          (r '()))
                      (while (and (not r) (consp ovs))
                        (if (flyspell-overlay-p (car ovs))
                            (setq r t)
                          (setq ovs (cdr ovs))))
                      (not r)))
          (backward-word 1)
          (setq pos (point)))
        ;; save the current location for next invocation
        (setq arg (1- arg))
        (setq flyspell-old-pos-error pos)
        (setq flyspell-old-buffer-error (current-buffer))
        (goto-char pos)
        (if (= pos min)
            (progn
              (message "No more miss-spelled word!")
              (setq arg 0))
          (forward-word)))))

  (eval-after-load 'flyspell
    #'(define-key flyspell-mode-map (kbd "C-,") #'flyspell-goto-previous-error))
#+END_SRC
** Extra functions

*** [[http://www.emacswiki.org/emacs/UnfillParagraph][unfill-paragraph]] function

Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph

#+BEGIN_SRC emacs-lisp
  (defun unfill-paragraph ()
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+END_SRC

*** [[http://www.emacswiki.org/emacs/IncrementNumber][Increment decimal number under cursor]]

#+BEGIN_SRC emacs-lisp
  (defun my-increment-number-decimal (&optional arg)
    "Increment the number forward from point by 'arg'."
    (interactive "p*")
    (save-excursion
      (save-match-data
        (let (inc-by field-width answer)
          (setq inc-by (if arg arg 1))
          (skip-chars-backward "0123456789")
          (when (re-search-forward "[0-9]+" nil t)
            (setq field-width (- (match-end 0) (match-beginning 0)))
            (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
            (when (< answer 0)
              (setq answer (+ (expt 10 field-width) answer)))
            (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                   answer)))))))
  
  (global-set-key (kbd "C-c C-=") 'my-increment-number-decimal)
#+END_SRC

** Blogging helpers

*** Update ~created_at~ date/time

#+BEGIN_SRC emacs-lisp
  (defun jc/update-created-date ()
    (interactive)
    (save-excursion
      (goto-char 0)
      (when (re-search-forward "^created_at: ")
        (kill-line)
        (insert-string (format-time-string "%c"))))
    )

  (dolist (hook '(markdown-mode-hook gfm-mode-hook yaml-mode-hook))
    (add-hook hook
              (lambda () (local-set-key (kbd "C-c j b d") 'jc/update-created-date))))
#+END_SRC

*** Quickly create a new scratch blog post

#+BEGIN_SRC emacs-lisp
  (defcustom jc/blog-draft-location
    (expand-file-name "Notes/00Pending/Blog drafts" jc/dropbox-location)
    "Location to put new blog drafts")

  (defun jc/get-scratch-blog-post-filename (n suffix)
    (let* ((filename (format "scratch-%02d.%s" n suffix))
           (path (expand-file-name filename jc/blog-draft-location)))
      (if (file-exists-p path)
          (jc/get-scratch-blog-post-filename (1+ n) suffix)
        path)))

  (defun jc/new-scratch-blog-post ()
    (interactive)
    (let ((path (jc/get-scratch-blog-post-filename 1 "md")))
      (find-file path)))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defhydra jc/blogging-hydra ()
    "blogging"
    ("s" jc/new-scratch-blog-post "new scratch blog post")
    ("d" jc/update-created-date "update created date")
    )
#+END_SRC
** Load local settings

The ~t~ argument ensures no error is thrown if the file doesn't exist.

#+BEGIN_SRC emacs-lisp
  (when (file-exists-p (expand-file-name "init-local.org" user-emacs-directory))
    (jc/require-org-file "init-local.org"))
  
  (load "local.el" t)
#+END_SRC

** Start the server

#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
