* General setup

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t
        org-startup-folded 'content
        org-export-backends '(ascii html icalendar latex md odt)
        org-use-fast-tag-selection 'auto
        org-time-stamp-custom-formats '("<%a %e %b %Y>" . "<%a %e %b %Y %H:%M>")
        )

  (add-hook 'org-mode-hook 'turn-off-filladapt-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC

* Bullets

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (setq org-bullets-bullet-list '("◉" "○" "●" "►" "•"))
#+END_SRC

* File locations

#+BEGIN_SRC emacs-lisp
  (setq org-mobile-inbox-for-pull org-default-notes-file
        org-mobile-directory (expand-file-name "Apps/MobileOrg" jc/dropbox-location)
        org-agenda-files `(,jc/agenda-file-work ,jc/agenda-file-personal)
        )

  (if (file-exists-p jc/agenda-file-calendar)
      (add-to-list 'org-agenda-files jc/agenda-file-calendar))
#+END_SRC

* Key bindings

** Global key bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

** Make windmove work in org-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)
#+END_SRC

** Make yasnippet work

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-or-maybe-expand)))
#+END_SRC

* Completion

#+BEGIN_SRC emacs-lisp
  (setq org-completion-use-ido t
        org-outline-path-complete-in-steps nil)
#+END_SRC

* Capture

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates `(
                                ("t" "Todo"
                                 entry
                                 (file "")
                                 "* TODO %?")
                                ("n" "Note"
                                 entry
                                 (file "")
                                 "* %?")
                                ("d" "CPD log"
                                 entry
                                 (file+datetree+prompt ,(expand-file-name "CPD/CPD log.org" jc/dropbox-location))
                                 "* %? %^{Type}p %^{PlannedTime}p %^{ActualTime}p\n\n** Goals\n\n** Outcomes\n\n** Actions\n\n** Notes\n")
                                ("m" "Meeting notes"
                                 entry
                                 (file+datetree ,(expand-file-name "meeting-notes.org" org-directory))
                                 "* %?")
                                ("l" "Logbook entry"
                                 entry
                                 (file+datetree ,jc/logbook-file)
                                 "* %?")
                                ("L" "Logbook entry (date prompt)"
                                 entry
                                 (file+datetree+prompt ,jc/logbook-file)
                                 "* %?")
                                ("w" "Work logbook entry"
                                 entry
                                 (file+datetree jc/logbook-file-work)
                                 "* %?")
                                ("W" "Logbook entry (date prompt)"
                                 entry
                                 (file+datetree+prompt jc/logbook-file-work)
                                 "* %?")))
#+END_SRC

* Refile

#+BEGIN_SRC emacs-lisp
  (setq org-refile-use-outline-path t
        org-refile-targets
        `(
          (nil :maxlevel . 5)
          (org-agenda-files :maxlevel . 4)
          (,(expand-file-name "someday.org" org-directory) :maxlevel . 2)
          (,(expand-file-name "people-agendas.org" org-directory) :maxlevel . 1)
          )
        )
#+END_SRC

** Refile to datetree

Based on code from [[http://emacs.stackexchange.com/questions/10597/how-to-refile-into-a-datetree][org mode - How to refile into a datetree - Emacs Stack Exchange]] by user ~ericstokes~.

#+BEGIN_SRC emacs-lisp
  (defun jc/org-refile-to-datetree (&optional prompt-for-date file)
    "Refile a subtree to a datetree corresponding to it's timestamp.

  The current time is used if the entry has no timestamp. If FILE
  is nil, refile in the current file."
    (interactive "Pf")
    (let* ((datetree-date (if prompt-for-date (org-read-date)
                            (or (org-entry-get nil "TIMESTAMP" t)
                                (org-read-date t nil "now"))))
           (date (org-date-to-gregorian datetree-date)))
      (save-excursion
        (org-cut-subtree)
        (let ((target-buffer (if file (find-file-noselect file)
                               (current-buffer))))
          (with-current-buffer target-buffer
            (org-datetree-find-date-create date)
            (org-narrow-to-subtree)
            (show-subtree)
            (org-end-of-subtree t)
            (newline)
            (goto-char (point-max))
            (org-paste-subtree 4)
            (widen))))))

  (defhydra jc/org-refile-hydra (:columns 2 :exit t)
    "refile"
    ("lp" (jc/org-refile-to-datetree nil jc/logbook-file) "logbook")
    ("LP" (jc/org-refile-to-datetree t jc/logbook-file) "logbook (w. prompt)")
    ("lw" (jc/org-refile-to-datetree nil jc/logbook-file-work) "work logbook")
    ("LW" (jc/org-refile-to-datetree t jc/logbook-file-work) "work logbook (w. prompt)")
    ("r" org-refile "refile"))
  (define-key org-mode-map (kbd "C-c r") 'jc/org-refile-hydra/body)
#+END_SRC


* Archive

#+BEGIN_SRC emacs-lisp
  (setq org-archive-location "%s_archive::datetree/")
#+END_SRC
* Encryption

#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+END_SRC

* Todo

#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t

        jc/todo-keywords
        '("TODO(t) READY(r) NEXT(n) DOING(o) | DONE(d)"
          "ONHOLD(h) AGENDA(a) DELEGATED(l) WAITING(w) MONITOR(m) | CANCELED(c)")
  
        org-todo-keywords
        (mapcar (lambda (kw) (cons `sequence (split-string kw)))
                jc/todo-keywords)

        org-todo-keyword-faces
        '(("TODO"      . "red")
          ("READY"     . "orange red")
          ("NEXT"      . "gold")
          ("DOING"     . "yellow")
          ("DONE"      . "forest green")

          ("ONHOLD"    . org-agenda-dimmed-todo-face)
          ("AGENDA"    . "deep sky blue")
          ("DELEGATED" . "steel blue")
          ("WAITING"   . "goldenrod")
          ("MONITOR"   . "red")
          ("CANCELLED" . "dark green"))

        org-enforce-todo-dependencies t)
#+END_SRC

** Additional checklist features

Allows resetting of checklist items in repeating TODO's.

#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
#+END_SRC

** Advanced dependencies

#+BEGIN_SRC emacs-lisp
  (require 'org-depend)
  
  (defun jc/org-goto-blocker ()
    (interactive)
    (let ((blocker (org-entry-get (point) "BLOCKER")))
      (if blocker
        (org-id-goto blocker)
        (message "This entry does not seem to have a blocker"))))
  
  (define-key org-mode-map (kbd "C-c B") 'jc/org-goto-blocker)
#+END_SRC

** Inline tasks

#+BEGIN_SRC emacs-lisp
  (require 'org-inlinetask)
  
  (setq org-inlinetask-default-state "TODO"
        org-inlinetask-show-first-star t)
#+END_SRC

* Links

#+BEGIN_SRC emacs-lisp
  (setq org-link-abbrev-alist
        '(("twitter" . "http://twitter.com/")))
#+END_SRC

* Agenda

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-todo-ignore-scheduled 'future
        org-enforce-todo-dependencies t
        org-agenda-dim-blocked-tasks 'invisible
        org-agenda-repeating-timestamp-show-all nil
        org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled
        org-agenda-skip-scheduled-delay-if-deadline t
        org-agenda-skip-scheduled-if-deadline-is-shown t
        org-agenda-span 14 ;; days
        )
#+END_SRC

** Agenda helper functions (for skipping etc.)

Use this with =org-agenda-skip-function= instead of =(org-agenda-todo-ignore-scheduled 'future)= to ignore tasks scheduled in the future /and/ their subtasks.

#+BEGIN_SRC emacs-lisp
  (defun jc/org-get-schedule-with-inheritance ()
    "If the current entry doesn't have a SCHEDULED date, check to see if
    one can be inherited."
    (let ((schedule (org-entry-get nil "SCHEDULED"))
          (inheritable-schedule (org-entry-get-with-inheritance "SCHEDULED")))
      (if (org-not-nil schedule) schedule inheritable-schedule)))
  
  (defun jc/skip-future-tasks-with-inheritance ()
    "Skip tasks that are scheduled in the future, including inherited
    schedule dates."
    (let ((scheduled (jc/org-get-schedule-with-inheritance))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (and scheduled
               (time-less-p (current-time) (org-time-string-to-time scheduled)))
          subtree-end
        nil)))
#+END_SRC

*** Berndt Hansen's project-related skipping functions

These are all licensed under GPLv3 or greater from [[http://doc.norang.ca/org-mode.html#Projects][Berndt Hansen's org-mode setup]]

#+BEGIN_SRC emacs-lisp
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))
  
  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))
  
  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))
  
  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))
  
  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))
  
  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)
  
  (defvar bh/hide-scheduled-and-waiting-next-tasks t)
  
  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))
  
  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))
  
  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))
  
  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))
  
  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))
  
  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))
  
  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))
  
  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))
  
  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))
  
  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))
#+END_SRC

*** Extra project-related functions

And now add some of my own based on the above...

#+BEGIN_SRC emacs-lisp
  (defun jc/skip-projects ()
    "Skip tasks that are projects but not their subtasks"
    (save-restriction
      (widen)
      (let ((next-heading (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p) next-heading nil))))
#+END_SRC

*** Deadline-skipping functions

#+BEGIN_SRC emacs-lisp
  (defun jc/deadline-passed ()
    (let ((deadline (org-entry-get (point) "DEADLINE")))
      (and deadline
           (time-less-p (apply 'encode-time (org-parse-time-string deadline)) (current-time)))))
  
  (defun jc/skip-if-deadline-passed ()
    "Skip any task with a deadline in the past"
    (save-restriction
      (widen)
      (let ((next-heading (save-excursion (or (outline-next-heading) (point-max)))))
        (when (jc/deadline-passed)
          next-heading))))
   
  (defun jc/skip-if-deadline-not-passed ()
      (save-restriction
      (widen)
      (let ((next-heading (save-excursion (or (outline-next-heading) (point-max)))))
        (unless (jc/deadline-passed)
          next-heading))))
#+END_SRC

** Custom agenda views

#+BEGIN_SRC emacs-lisp
  (setq jc/org-agenda-task-cmds
        '((todo "DOING"
                ((org-agenda-overriding-header "Tasks in progress")))
          (todo "NEXT"
                ((org-agenda-overriding-header "Things to do next")))
          (todo "READY"
                ((org-agenda-overriding-header "Things ready to do")))
          (todo "TODO"
                ((org-agenda-overriding-header "Things to do")
                 (org-agenda-dim-blocked-tasks 'invisible)
                 (org-agenda-skip-function '(or (jc/skip-projects)
                                                (jc/skip-future-tasks-with-inheritance)))))
          (todo "WAITING|DELEGATED"
                ((org-agenda-overriding-header "Waiting for/delegated (deadline passed)")
                 (org-agenda-skip-function '(or (jc/skip-if-deadline-not-passed)
                                                (jc/skip-future-tasks-with-inheritance)))))
          (todo "DELEGATED"
                ((org-agenda-overriding-header "Delegated")
                 (org-agenda-skip-function '(or (jc/skip-if-deadline-passed)
                                                (jc/skip-future-tasks-with-inheritance)))))
          (todo "WAITING"
                ((org-agenda-overriding-header "Waiting for")
                 (org-agenda-skip-function '(or (jc/skip-if-deadline-passed)
                                                (jc/skip-future-tasks-with-inheritance)))))
          (todo "MONITOR"
                ((org-agenda-overriding-header "Monitor")))
          (todo "ONHOLD"
                ((org-agenda-overriding-header "On hold")))
          (todo "TODO"
                ((org-agenda-overriding-header "Stuck or complete projects")
                 (org-agenda-skip-function 'bh/skip-non-stuck-projects))))
        
        org-agenda-custom-commands
        `(("p" "Personal tasks" ,jc/org-agenda-task-cmds
           ((org-agenda-files `(,jc/agenda-file-personal))))
          ("w" "Work tasks" 
           ,(append jc/org-agenda-task-cmds
                    `((tags-todo "atwork/!TODO"
                                ((org-agenda-files `(,jc/agenda-file-personal))
                                 (org-agenda-overriding-header "Personal tasks at work")))))
           ((org-agenda-files `(,jc/agenda-file-work)))))

        org-agenda-tags-todo-honor-ignore-options t)
#+END_SRC

* Markup

Disable strike-through formatting because I don't use it and it messes up ~table.el~ formatting.

#+BEGIN_SRC emacs-lisp
  (setq org-emphasis-alist '(("*" bold)
                             ("/" italic)
                             ("_" underline)
                             ("=" org-verbatim verbatim)
                             ("~" org-code verbatim)))
#+END_SRC
* Export

#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(ascii beamer html icalendar latex md odt gfm)

        org-export-with-toc nil
        org-export-with-section-numbers nil)

  (dolist (backend org-export-backends)
    (ignore-errors
      (require (make-symbol (concat "ox-" (symbol-name backend))))))
#+END_SRC

** LaTeX/PDF

#+BEGIN_SRC emacs-lisp
  (setq org-latex-default-packages-alist
        '(("" "fontspec" t)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ;; ("" "amsmath" t)
          ;; ("" "textcomp" t)
          ;; ("" "marvosym" t)
          ;; ("" "wasysym" t)
          ;; ("" "amssymb" t)
          ("" "hyperref" nil)
          "\\tolerance=1000"
          )
  
        org-latex-packages-alist
        '(("" "geometry" nil)
          ("" "booktabs" nil)
          )
  
        org-latex-pdf-process
        '("latexmk -xelatex -recorder -output-directory=%o %f")
  
        org-latex-tables-booktabs t
        org-export-latex-image-default-option "width=\\textwidth"
        org-latex-image-default-width "\\textwidth"
        )
#+END_SRC

*** Custom link types for PDF export (showing the URL on the printed page)

#+BEGIN_SRC emacs-lisp
  (defun jc/org-export-inline-link (path desc format)
    (case format
      ((latex) (format "%s (\\url{%s})" desc path))
      ((html) (format "<a href=\"%s\">%s</a>" path desc))
      ((t) desc)))
  
  (defun jc/org-export-expanded-link (path desc format)
    (case format
      ((latex) (format "%s: \\url{%s}" desc path))
      ((html) (format "<a href=\"%s\">%s</a>" path desc))
      ((t) desc)))
  
  (org-add-link-type "inline" nil 'jc/org-export-inline-link)
  (org-add-link-type "expanded" nil 'jc/org-export-expanded-link)
#+END_SRC
* Babel

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (python . t)
     (shell . t)
     (ditaa . t)))
#+END_SRC

** Don't ask before evaluating some languages

#+BEGIN_SRC emacs-lisp
  (defun jc/org-confirm-babel-evaluate (lang body)
    (not (string= lang "ditaa")))
  
  (setq org-confirm-babel-evaluate 'jc/org-confirm-babel-evaluate)
  
#+END_SRC

* Mobile

#+BEGIN_SRC emacs-lisp
  (setq org-mobile-files (list org-agenda-files
                               (mapcar (lambda (f) (expand-file-name f org-directory))
                                       '("someday.org" "logbook.org" "logbook-work.org"))))

  ;; (when (boundp 'focus-in-hook)
  ;;   (add-hook 'focus-in-hook 'org-mobile-pull))
#+END_SRC

* Contacts                                                         :disabled:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'org-contacts)
  
  (setq org-contacts-files
        `(,(expand-file-name "contacts.org" org-directory)))
  
  (add-to-list 'org-capture-templates
               '("c" "Contacts" entry (file+headline (car org-contacts-files) "To file")
                 "* %(org-contacts-template-name)\n:PROPERTIES:%(org-contacts-template-email)\n:END:"))
  
  (define-key org-mode-map (kbd "C-c m") 'org-contacts-view-send-email)
#+END_SRC

* Rifle

#+BEGIN_SRC emacs-lisp
  (defhydra jc/rifle-hydra (:exit t)
    "Org Rifle"
    ("r" helm-org-rifle "agenda files")
    ("b" helm-org-rifle-current-buffer "current buffer")
    ("f" (helm-org-rifle-files (list (expand-file-name "Notes/reference.org" jc/dropbox-location))) "reference notes")
    ("l" (helm-org-rifle-files (list jc/logbook-file)) "logbook")
    ("L" (helm-org-rifle-files (list jc/logbook-file-work)) "logbook"))

  (evil-leader/set-key "or" 'jc/rifle-hydra/body)
#+END_SRC

* Additional features (not already loaded)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "lisp/org" user-emacs-directory))
  
  (let ((packages '(;; Built-in packages (from contrib)
                    org-bbdb
                    org-bibtex
                    org-crypt
                    org-docview
                    org-gnus
                    org-info
                    org-irc
                    org-mhe
                    org-protocol
                    org-rmail
                    org-w3m
                    org-wl
                    ;; Custom packages
                    org-subtask-reset
                    )))
    (dolist (p packages)
      (require p)))
#+END_SRC
